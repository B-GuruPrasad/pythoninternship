vals=[-10,-7,-3,4,2]
vals.sort()
prod1=vals[-1]*vals[-2]
prod2=vals[0]*vals[1]
if prod2>prod1:
    print(vals[0]+vals[1])
else:
    print(vals[-1]+vals[-2])


# digital secure data transfer solution
s1="abcdefghijklmnopqrstuvwxyz"
s2="ABCDEFGHIJKLMNOPQRSTUVWXYZ"
a="D"
key=3
if a.islower():
    idx=s1.index(a)
    idx=idx+key
    b=idx%26
    print(s1[b])
else:
    idx=s2.index(a)
    idx=idx+key
    b=idx%26
    print(s2[b])


# digital secure data transfer solution
a="D"
key=3
b=ord(a)+key
print(chr(b))






# range b/w the numbers in a given list
a,b,c=6,30,50
l=[29,38,12,48,39,55]
for i in l:
    if b>=i and c>=i:
        print(i,end=" ")



# BFS 
def BFS(graph,start):
    visited=set()
    q=[start]
    while q:
        n=q.pop(0)
        if n not in visited:
            print(n,end=" ")
            visited.add(n)
            q.extend(graph[n])
graph={
    'A':['B','C'],
    'B':['A','D','E'],
    'C':['A','F'],
    'D':['B'],
    'E':['B','F'],
    'F':['C','E']
}
BFS(graph,'A')



# DFS
def dfs(graph,n,visited=set()):
    if n not in visited:
        print(n,end=" ")
        visited.add(n)
        for i in graph[n]:
            dfs(graph,i,visited)
        
graph={
    'A':['B','C'],
    'B':['A','D','E'],
    'C':['A','F'],
    'D':['B'],
    'E':['B','F'],
    'F':['C','E']
}
dfs(graph,'A')
